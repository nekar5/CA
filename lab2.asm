;-------------------------------------------------------------------------------------
; ЛР №2
; Архітектура комп'ютера
; Факультет: ФІОТ
; Курс: 1
; Група: ІТ-03
;-------------------------------------------------------------------------------------
; Автори: Бойко, Карванський, Карпов
; Дата: 17.03.2021
;-------------------------------------------------------------------------------------


;----------------ЗАГОЛОВОК ПРОГРАМИ---------------------------------------------------

  IDEAL  ; Директива - тип Асемблера TASM
  MODEL small ; Директива - тип моделі пам'яті
  STACK 256 ; Директива - розмір стеку в байтах
  
;----------------------МАКРОСИ--------------------------------------------------------
; Макрос для ініціалізації
MACRO M_Init ; Початок макросу
  mov ax, @data ; ax <- @data
  mov ds, ax ; ds <- ax
  mov es, ax ; es <- ax
ENDM M_Init ; Кінець макросу

;---------------ПОЧАТОК СЕГМЕНТУ ДАНИХ------------------------------------------------

  DATASEG
  
excode db 0

; Одна лінія прямокутника
rect_line db 37h, 0eah, 37h, 0eah, 37h, 0eah, 37h, 0eah, 37h, 0eah ; x.yh x - фон, у - букви
    db 37h, 0eah, 37h, 0eah, 37h, 0eah, 37h, 0eah, 37h, 0eah
    db 37h, 0eah, 37h, 0eah, 37h, 0eah, 37h, 0eah, 37h, 0eah
    db 37h, 0eah, 37h, 0eah, 37h, 0eah, 37h, 0eah, 37h, 0eah
    
    
rect_line_length=$-rect_line ; визначення довжини рядка
    
;------------ПОЧАТОК СЕГМЕНТУ КОДУ----------------------------------------------------
  
  CODESEG
  
Start: M_Init
  ; використовуємо макрос
;-------------------------------------------------------------------------------------
mov dx, 1010 ; Початок виводу прямокутника, координата верхнього лівого кута 160*y+2*x
       ; y - кількість рядків зверху, х - кількість символів зліва
       ; у нашому випадку х:30; y:30, але цей варіант занадто великий для виведення,
	   ; тому нехай x:25; y:6 160*6+2*25 = 1010

mov cx, 10   ; Лічильник ітерацій 
loopStart:  ; Початок циклу
      ; Регістр cx використовується в movsb з префіксом rep
      ; зберігаємо значення лічильника в іншому регістрі (bx)
  mov bx, cx ; зберігаємо значення лічильника у іншому регістрі
  mov ax, 0B800h ; 1. Сегментна адреса відео-пам'яті
  mov es, ax ; 2. До ES

; Налаштування SI, DI і CX для movsb
  mov di, dx; di <- Початок виводу на екран
  mov si, offset rect_line ; Записуємо в si наш рядок
  mov cx, rect_line_length ; Число байтів на пересилання
  cld ; После выполнения команды флаг DF сбрасывается в ноль.
  rep movsb ; Записать в ячейку по адресу ES:(E)DI байт из ячейки с адресом DS:(E)SI
  mov cx, bx ; rep movsb виконана, тому cx вільний, повертаємо його значення з bx назад
  add dx, 160 ; Зміщення для наступної лінії
LOOP loopStart ; 

Exit:
  mov ah, 04Ch
  mov al, [excode] ; отримання коду на виході
  int 21h ; виклик DOS 4ch
;-------------------------------------------------------------------------------------
END Start
;-------------------------------------------------------------------------------------